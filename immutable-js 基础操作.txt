笔记, immutable-js 基础操作

javascript immutable-js  题叶 2015年06月16日发布
   |   6   收藏  |  54
13.9k 次浏览
这篇文章是 immutable-js 一些操作的整理, 目前只有基本的操作:
文档请查看: http://facebook.github.io/imm...
使用过程中遇到的写法我会不会增加在后边.

JavaScript 当中不可变数据有点不适应, 需要借鉴一些 Haskell 中的内容:
http://learnyouahaskell.com/c...
https://leanpub.com/purescrip...

更新:

六月份到十月份, 我们完成了不可变数据的重构
配合简聊的巨大的单一 store, 可以整理出来一些常用的方法
示例代码用的是 CoffeeScript
从 JavaScript 数据生成不可变对象(支持数据嵌套):

Immutable.fromJS([1,2])
Immutable.fromJS({a: 1})
从 JavaScript 数据生成不可变对象(不支持数据嵌套):

Immutable.List([1,2]})
Immutable.Map({a: 1})
从不可变数据生成 JavaScript 对象

immutableData.toJS()
判断两个数据结构是否相等:

Immutable.is immutableA, immutableB
判断两个数据引用是否一致(shallow equal):

immutableA is immutableB
List
Immutable.List() # 空 List
Immutable.List([1,2])
Immutable.fromJS([1,2])
查看 List 的大小:

immutableA.size
immutableA.count()
判断是否是 List:

Immutable.List.isList(x)
React 组件 propTypes 判断是否是 List:

React.PropTypes.instanceOf(Immutable.List).isRequired
获取 List 索引的元素(负数也是能运行的):

immutableData.get(0)
immutableData.get(-1) #反向索引
通过 getIn 访问嵌套数组当中的数据:

immutableData.getIn [1, 2]
List 更新操作, 也就是创建一个新的 List 数据:

immutableA = Immutable.fromJS([0, 0, [1, 2]])
immutableB = immutableA.set 1, 1
immutableC = immutableB.update 1, (x) -> x + 1
immutableC = immutableB.updateIn [2, 1], (x) -> x + 1
排序, 有 sort 和 sortBy:

immutableData.sort (a, b) ->
 if a < b then return -1
 if a > b then return 1
 return 0
immutableData.sortBy (x) ->
  x
遍历(返回 false 会终止遍历):

immutableData.forEach (a, b) ->
  console.log a, b
  return true
查找, find 返回第一个匹配值, filter 返回 List:

immutableData.find (x) ->
  x > 1
immutableData.filter (x) ->
  x > 1
immutableData.filterNot (x) ->
  x <= 1
Map
Immutable.Map() # 空 Map
Immutable.Map({a: 1})
Immutable.fromJS({a: 1})
判断 Map 的写法和 List 判断类似:

Immutable.Map.isMap(x)
获得 Map 中的数据:

immutableData.get('a')
通过 getIn 访问嵌套的 Map 中的树上:

immutableData.getIn ['a', 'b']
更新对象和嵌套的对象:

immutableB = immutableA.set 'a', 1
immutableB = immutableA.setIn ['a', 'b'], 1
immutableB = immutableA.update 'a', (x) -> x + 1
immutableB = immutableA.updateIn ['a', 'b'], (x) -> x + 1
合并对象:

immutableB = immutableA.merge(immutableC)
判断属性是否存在(undefined 也是存在的):

immutableData = Immutable.fromJS({key: null})
immutableData.has('key')
Map 的 filter 和 List 神似, 返回值 Map:

data = Immutable.fromJS({a: 1, b: 2})
data.filter (value, key) ->
 value is 1
# => Map {a: 1}
同样 Map 也可以做一些 reduce 操作, 以及其他的方法, 类似 List:

immutableA.reduce (acc, value, key) ->
   acc.set key, value
, immutable.Map()
获取 key 和 value 的数组形式:

immutableData.keySeq()
immutableData.valueSeq()
更多
从 JavaScript JSON Object 迁移主要用这两个数据结构
然而文档中提供的数据结构非常多, 记得自己看文档, 我们还有大量未探索的